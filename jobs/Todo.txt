
/* TODO

- thread this shit & synch it - done?
    - maybe better?
- if possible remove mutex_fullLock
- redo scheduler data struct

- job stealing? bzw multi job

- this is how it works < constanze?

- beatify tihs SHT <3
    - maybe better?
- delete this
*/


/*
# AGD-Jobs
Assignment
- Make sure to use proper synchronization primitives, avoid race conditions, deadlocks and other common multithreading pitfalls
    - maybe better?
- Stick to C++ guidelines and produce clean and readable code (simple is often better)
    - maybe better?

Hand-in
- The solution file with your jobsystem implementation, please don't submit any unnecessary or unused files
- !!! A short, written executive summary how your jobsystem implementation works and what features it supports (.pdf, .md, .txt or documentation in the source files) - max. 1 A4 page if .pdf

Bonus points
-Implement the work-stealing algorithm (+10pts)
    - maybe?
-Automatic discovery of supported ideal thread count (+2.5pts, number of cores/HW threads + 1)
    - maybe?

Negative points
Points can be subtracted for:
-Plagiats-Incorrect implementations (base implementation or bonus point features)
-Warning generated by your code (if something in the template suddenly warns in a different VS version that doesn’t reduce the points)
-Code that doesn’t compile or crashes
-Usage of third-party code or libraries (you can use WinAPI and everything in the std, but no third-party jobsystem, threadpool or similar)
*/